# 워크플로우의 이름을 지정합니다.
name: Flutter CI/CD

# 이 워크플로우가 언제 실행될지 지정합니다.
# main 브랜치에 push 되거나 pull request가 열릴 때 실행됩니다.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 수행할 작업(job)들을 정의합니다.
jobs:
  # 'build-and-test' 라는 이름의 작업을 정의합니다.
  build-and-test:
    # 이 작업이 실행될 가상 머신의 종류를 지정합니다. (최신 우분투)
    runs-on: ubuntu-latest

    # 작업의 단계(step)들을 정의합니다.
    steps:
    # 1. 소스 코드 가져오기 (Checkout)
    # actions/checkout@v4는 저장소의 코드를 가상 머신으로 가져오는 공식 액션입니다.
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Flutter SDK 설치
    # subosito/flutter-action@v2는 Flutter 환경을 설정해주는 인기있는 액션입니다.
    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        channel: 'stable' # Flutter 안정화 버전을 사용합니다.

    # 3. GitHub Secrets를 사용하여 secrets.dart 파일 생성 (가장 중요)
    # GitHub 저장소에 저장해 둔 OPENAI_API_KEY를 사용하여 빌드 시에만 파일을 생성합니다.
    - name: Create secrets.dart file
      run: |
        echo "const String openAiApiKey = '${{ secrets.OPENAI_API_KEY }}';" > lib/secrets.dart
      
    # 4. Flutter 패키지(의존성) 설치
    # pubspec.yaml 파일에 있는 패키지들을 설치합니다.
    - name: Install dependencies
      run: flutter pub get

    # 5. (선택사항) Flutter 코드 분석
    # 코드에 문법적 오류나 스타일 문제가 없는지 확인합니다.
    - name: Analyze project
      run: flutter analyze

    # 6. (선택사항) Flutter 위젯 테스트 실행
    # test 폴더에 있는 테스트 코드를 실행합니다.
    - name: Run tests
      run: flutter test

    # 7. Flutter 앱 빌드 (Android)
    # 실제 앱 설치 파일(APK)을 생성합니다.
    - name: Build APK
      run: flutter build apk
